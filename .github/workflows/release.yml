name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write
  id-token: write

env:
  PYTHON_VERSION: '3.11'

jobs:
  prepare:
    name: Validate Release Tag
    runs-on: ubuntu-22.04
    outputs:
      version: ${{ steps.meta.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Validate version metadata
        id: meta
        run: |
          TAG_VERSION=${GITHUB_REF_NAME#v}
          echo "version=${TAG_VERSION}" >> $GITHUB_OUTPUT

          INIT_VERSION=$(python - <<'PY'
from pathlib import Path
import re
match = re.search(r"__version__\s*=\s*['\"]([^'\"]+)['\"]", Path("repair_portal/__init__.py").read_text())
print(match.group(1) if match else "")
PY
)
          if [ -z "$INIT_VERSION" ]; then
            echo "Unable to determine __version__ from repair_portal/__init__.py"
            exit 1
          fi
          echo "__version__ in repo: $INIT_VERSION"

          if [ "$INIT_VERSION" != "$TAG_VERSION" ]; then
            echo "Tag version ($TAG_VERSION) does not match repair_portal/__version__ ($INIT_VERSION)"
            exit 1
          fi

          if ! grep -q "## \[$TAG_VERSION\]" CHANGELOG.md; then
            echo "Missing CHANGELOG entry for $TAG_VERSION"
            exit 1
          fi

      - name: Run schema guard
        run: python scripts/schema_guard.py

      - name: Compile sources
        run: python -m compileall repair_portal

  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-22.04
    needs: prepare
    outputs:
      notes: ${{ steps.notes.outputs.notes_path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Extract release notes
        id: notes
        env:
          VERSION: ${{ needs.prepare.outputs.version }}
        run: |
          python - <<'PY'
import pathlib
import re
import os
version = os.environ["VERSION"]
changelog = pathlib.Path("CHANGELOG.md").read_text()
pattern = re.compile(rf"## \[{re.escape(version)}\](.*?)(?=\n## \[|\Z)", re.DOTALL)
match = pattern.search(changelog)
notes = match.group(0) if match else f"## [{version}]\n\nNo detailed changelog available."
path = pathlib.Path("dist/RELEASE_NOTES.md")
path.parent.mkdir(parents=True, exist_ok=True)
path.write_text(notes.strip() + "\n")
with open(os.environ['GITHUB_OUTPUT'], 'a', encoding='utf-8') as fh:
    fh.write(f"notes_path={path}\n")
PY

      - name: Upload release notes artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: dist/RELEASE_NOTES.md
          retention-days: 30

  package:
    name: Build Release Artifact
    runs-on: ubuntu-22.04
    needs: prepare
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create source archive
        run: |
          VERSION=${{ needs.prepare.outputs.version }}
          mkdir -p dist
          git archive --format=tar --prefix=repair_portal-${VERSION}/ HEAD | gzip > dist/repair_portal-${VERSION}.tar.gz
          sha256sum dist/repair_portal-${VERSION}.tar.gz > dist/repair_portal-${VERSION}.tar.gz.sha256

      - name: Upload package artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/repair_portal-${{ needs.prepare.outputs.version }}.tar.gz
            dist/repair_portal-${{ needs.prepare.outputs.version }}.tar.gz.sha256
          retention-days: 30

  publish:
    name: Publish GitHub Release
    runs-on: ubuntu-22.04
    needs:
      - prepare
      - release-notes
      - package
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare.outputs.version }}
          release_name: repair_portal v${{ needs.prepare.outputs.version }}
          body_path: dist/release-notes/RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(needs.prepare.outputs.version, '-') }}

      - name: Upload source archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/release-artifacts/repair_portal-${{ needs.prepare.outputs.version }}.tar.gz
          asset_name: repair_portal-${{ needs.prepare.outputs.version }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/release-artifacts/repair_portal-${{ needs.prepare.outputs.version }}.tar.gz.sha256
          asset_name: repair_portal-${{ needs.prepare.outputs.version }}.tar.gz.sha256
          asset_content_type: text/plain

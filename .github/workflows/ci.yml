name: repair_portal-ci

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  checks: write
  security-events: write
  id-token: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  BENCH_NAME: ci-bench
  SITE_NAME: erp-ci.artisanclarinets.local
  DB_ROOT_PASSWORD: frappe
  ADMIN_PASSWORD: admin

jobs:
  python-quality:
    name: Python Quality Gates
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install \
            ruff==0.5.6 \
            mypy==1.10.0 \
            bandit==1.7.9 \
            safety==3.2.7 \
            types-requests

      - name: Schema guard
        run: python scripts/schema_guard.py

      - name: Ruff lint (Python)
        run: ruff check repair_portal --output-format=github

      - name: Ruff format check
        run: ruff format --check repair_portal

      - name: Static type checks
        run: mypy --config-file pyproject.toml repair_portal

      - name: Security lint (Bandit)
        run: bandit -r repair_portal -x repair_portal/tests -f json -o bandit-report.json || true

      - name: Dependency hygiene (Safety)
        run: safety check --full-report --json --output safety-report.json || true

      - name: Upload Python QA artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-quality-artifacts
          path: |
            bandit-report.json
            safety-report.json
          if-no-files-found: ignore
          retention-days: 30

  frontend-quality:
    name: Frontend Quality Gates
    runs-on: ubuntu-22.04
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          corepack enable
          npm install --no-fund --no-audit

      - name: Biome lint (JS/TS/Vue)
        run: npx @biomejs/biome check . --reporter json | tee biome-report.json

      - name: ESLint (targeted)
        run: npx eslint "repair_portal/public/**/*.{js,ts,vue}" --max-warnings=0 --format stylish | tee eslint-report.txt

      - name: Upload frontend lint logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-quality-artifacts
          path: |
            biome-report.json
            eslint-report.txt
          if-no-files-found: ignore
          retention-days: 14

  bench-tests:
    name: Bench Tests & Build
    runs-on: ubuntu-22.04
    needs:
      - python-quality
      - frontend-quality
    timeout-minutes: 60

    services:
      mariadb:
        image: mariadb:10.6
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD }}
          MYSQL_DATABASE: frappe
          MYSQL_USER: root
          MYSQL_PASSWORD: ${{ env.DB_ROOT_PASSWORD }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -p${{ env.DB_ROOT_PASSWORD }}"
          --health-interval=10s
          --health-timeout=10s
          --health-retries=10
      redis-cache:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20
      redis-queue:
        image: redis:7-alpine
        ports:
          - 6380:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 20

    env:
      CI: "1"
      BENCH_HOME: ${{ github.workspace }}/ci-bench

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y yarn redis-tools xvfb

      - name: Install bench
        run: |
          python -m pip install --upgrade pip
          pip install frappe-bench==5.21.3

      - name: Initialize bench
        env:
          BENCH_NAME: ${{ env.BENCH_NAME }}
        run: |
          bench init ${BENCH_NAME} \
            --frappe-branch version-15 \
            --python $(which python) \
            --skip-assets \
            --skip-redis-config-generation

      - name: Sync repair_portal app into bench
        run: |
          mkdir -p ${BENCH_HOME}/apps/repair_portal
          rsync -a --delete \
            --exclude '.git/' \
            --exclude '.github/' \
            --exclude 'node_modules/' \
            --exclude 'docs/' \
            $GITHUB_WORKSPACE/ ${BENCH_HOME}/apps/repair_portal/

      - name: Configure bench
        working-directory: ${{ env.BENCH_HOME }}
        env:
          SITE_NAME: ${{ env.SITE_NAME }}
          DB_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD }}
        run: |
          bench set-config -g db_host 127.0.0.1
          bench set-config -g redis_cache redis://redis-cache:6379
          bench set-config -g redis_queue redis://redis-queue:6379
          bench set-config -g redis_socketio redis://redis-queue:6379
          bench set-config -g developer_mode 1
          bench setup requirements --python
          bench setup requirements --node

      - name: Create test site
        working-directory: ${{ env.BENCH_HOME }}
        env:
          SITE_NAME: ${{ env.SITE_NAME }}
          DB_ROOT_PASSWORD: ${{ env.DB_ROOT_PASSWORD }}
          ADMIN_PASSWORD: ${{ env.ADMIN_PASSWORD }}
        run: |
          bench new-site ${SITE_NAME} \
            --admin-password ${ADMIN_PASSWORD} \
            --db-name ${SITE_NAME//./_} \
            --db-root-username root \
            --db-root-password ${DB_ROOT_PASSWORD} \
            --no-mariadb-socket \
            --force

      - name: Install repair_portal app
        working-directory: ${{ env.BENCH_HOME }}
        env:
          SITE_NAME: ${{ env.SITE_NAME }}
        run: bench --site ${SITE_NAME} install-app repair_portal

      - name: Build assets
        working-directory: ${{ env.BENCH_HOME }}
        env:
          SITE_NAME: ${{ env.SITE_NAME }}
        run: bench build --site ${SITE_NAME} --app repair_portal

      - name: Run repair_portal test suite
        working-directory: ${{ env.BENCH_HOME }}
        env:
          SITE_NAME: ${{ env.SITE_NAME }}
        run: |
          bench --site ${SITE_NAME} run-tests \
            --app repair_portal \
            --coverage \
            --failfast \
            --profile

      - name: Collect coverage & logs
        if: always()
        run: |
          mkdir -p $GITHUB_WORKSPACE/test-artifacts
          if [ -d "${BENCH_HOME}/sites/coverage" ]; then
            cp -R ${BENCH_HOME}/sites/coverage $GITHUB_WORKSPACE/test-artifacts/coverage
          fi
          if [ -d "${BENCH_HOME}/sites/test-reports" ]; then
            cp -R ${BENCH_HOME}/sites/test-reports $GITHUB_WORKSPACE/test-artifacts/junit
          fi
          if [ -f "${BENCH_HOME}/logs/bench.log" ]; then
            cp ${BENCH_HOME}/logs/bench.log $GITHUB_WORKSPACE/test-artifacts/bench.log
          fi

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bench-test-artifacts
          path: test-artifacts
          retention-days: 30

      - name: Upload coverage to Codecov
        if: success() && secrets.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: |
            test-artifacts/coverage/coverage.xml
          flags: frappe-tests
          fail_ci_if_error: false

{
  "title": "frappe-v15-standard-app-template-schema",
  "description": "Canonical templates for every file created by `bench new-app` plus common extras (CI, public assets, DocType stubs, etc.). Replace ALL_CAPS placeholders before committing.",
  "type": "object",
  "properties": {
    ".gitignore": {
      "type": "string",
      "const": "# Relative Path: .gitignore\\n# Purpose: Keep junk and secrets out of Git\\n# Date: YYYY-MM-DD\\n\\n# Python artefacts\\n__pycache__/\\n*.py[cod]\\n*.egg-info/\\n\\n# Bench / Frappe build artefacts\\n*.sqlite\\nnode_modules/\\nsites/*/private/\\nsites/*/public/files/\\nsites/*/public/backups/\\n\\n# Editors & OS\\n.DS_Store\\n.idea/\\n.vscode/\\n.env\\n.env.*\\n"
    },
    "pyproject.toml": {
      "type": "string",
      "const": "# Relative Path: pyproject.toml\\n# Purpose: Build metadata + dependencies for Frappe v15\\n# Last Updated: YYYY-MM-DD\\n\\n[build-system]\\nrequires      = [\\\"bench>=6.0.0\\\"]\\nbuild-backend = \\\"bench.build\\\"\\n\\n[tool.bench.app]\\napp_name        = \\\"YOUR_APP\\\"\\napp_title       = \\\"Your App\\\"\\napp_publisher   = \\\"YOUR NAME\\\"\\napp_email       = \\\"you@example.com\\\"\\napp_description = \\\"One-line elevator pitch\\\"\\napp_icon        = \\\"octicon octicon-rocket\\\"\\napp_color       = \\\"blue\\\"\\napp_license     = \\\"MIT\\\"\\nversion         = \\\"0.0.1\\\"\\n\\n[tool.bench.dependencies]\\nfrappe  = \\\">=15.0.0,<16.0.0\\\"\\n# erpnext = \\\">=15.0.0\\\"   # uncomment if you depend on ERPNext\\n\\n[tool.bench.dev-dependencies]\\npytest   = \\\">=8.0\\\"\\nruff     = \\\">=0.4\\\"\\ncoverage = \\\">=7.5\\\"\\n"
    },
    "README.md": {
      "type": "string",
      "const": "## Relative File Location: README.md\\n## Date: YYYY-MM-DD\\n## Version: 0.0.1\\n## Linked File References:\\n- pyproject.toml\\n- CHANGELOG.md\\n- LICENSE\\n\\n## üöÄ Quick start\\n1. `bench start`\\n2. `bench --site <SITE> install-app your_app`\\n\\n## ‚û°Ô∏è Navigation\\nüè† **Desk** ‚Üí Settings ‚Üí Workspace  \\nüõ† **Developer** ‚Üí DocType ‚Üí Your DocType\\n\\n## Purpose\\nA paragraph or two describing what problem this app solves.\\n\\n## Compliance / License\\nThis project is licensed under the MIT license (see LICENSE file).\\n"
    },
    "CHANGELOG.md": {
      "type": "string",
      "const": "# Relative Path: CHANGELOG.md\\n# Purpose: Track user-facing changes\\n# SemVer: 2.0.0\\n\\n## [0.0.1] ‚Äì YYYY-MM-DD\\n### Added\\n- Initial scaffold generated with `bench new-app`\\n"
    },
    "LICENSE": {
      "type": "string",
      "const": "MIT License\\n\\nCopyright (c) YYYY YOUR NAME\\n\\nPermission is hereby granted, free of charge, to any person obtaining...\\n"
    },
    "your_app/__init__.py": {
      "type": "string",
      "const": "# <!-- required in every folder with a .py file --> Relative Path: your_app/__init__.py\\n# Purpose: App bootstrapping\\n# Date: YYYY-MM-DD\\n\\n__version__ = \\\"0.0.1\\\"\\n"
    },
    "your_app/hooks.py": {
      "type": "string",
      "const": "# Relative Path: your_app/hooks.py\\n# Purpose: Extend / override Frappe behaviour\\n# Last Updated: YYYY-MM-DD\\n\\napp_name = \\\"your_app\\\"\\napp_title = \\\"Your App\\\"\\napp_publisher = \\\"YOUR NAME\\\"\\napp_description = \\\"Describe your app\\\"\\napp_icon = \\\"octicon octicon-rocket\\\"\\napp_color = \\\"blue\\\"\\napp_email = \\\"you@example.com\\\"\\napp_license = \\\"MIT\\\"\\n\\n# Include JS / CSS in desk.html\\napp_include_js = \\\"your_app/public/js/app.bundle.js\\\"\\napp_include_css = \\\"your_app/public/css/app.css\\\"\\n\\n# Scheduled Tasks\\nscheduler_events = {\\n    \\\"daily\\\": [\\\"your_app.tasks.daily\\\"]\\n}\\n\\n# DocType JavaScript overrides\\ndoctype_js = {\\n    \\\"Import Mapping Setting\\\": \\\"your_app/import_mapping_setting/import_mapping_setting.js\\\"\\n}\\n\\n# Fixtures (exported customisations)\\nfixtures = [\\\"Custom Field\\\", \\\"Property Setter\\\"]\\n"
    },
    "your_app/modules.txt": {
      "type": "string",
      "const": "# Relative Path: your_app/modules.txt\\n# Purpose: Register top-level modules for Frappe Desktop\\n\\nYour App\\n"
    },
    "your_app/patches.txt": {
      "type": "string",
      "const": "# Relative Path: your_app/patches.txt\\n# Format: dotted.path.to.patch_file <TAB> Patch description\\n\\nyour_app.patches.v0_0_2.rename_field\\tRename `old_field` to `new_field` in DocType X\\n"
    },
    "your_app/config/desktop.py": {
      "type": "string",
      "const": "# Relative Path: your_app/config/desktop.py\\n# Purpose: Add a Workspace card\\n# Date: YYYY-MM-DD\\n\\nfrom __future__ import annotations\\nfrom frappe import _\\n\\n\\ndef get_data():\\n    return [\\n        {\\n            \\\"module_name\\\": \\\"Your App\\\",\\n            \\\"type\\\": \\\"module\\\",\\n            \\\"label\\\": _(\\\"Your App\\\"),\\n            \\\"icon\\\": \\\"octicon octicon-rocket\\\",\\n            \\\"color\\\": \\\"blue\\\",\\n        }\\n    ]\\n"
    },
    "your_app/public/js/app.bundle.js": {
      "type": "string",
      "const": "/* Relative Path: your_app/public/js/app.bundle.js\\n   Purpose: Root JS entrypoint (Rollup/Vite will bundle this) */\\n\\nimport \\\"./components/hello_world\\\";\\n"
    },
    "your_app/public/css/app.bundle.css": {
      "type": "string",
      "const": "/* Relative Path: your_app/public/css/app.bundle.css\\n   Purpose: App-level Tailwind / custom styles */\\n\\n/* @tailwind base; @tailwind components; @tailwind utilities; */\\n"
    },
    "your_app/app_module/doctype_name_in_frappe/doctype_name/doctype_file.js": {
      "type": "string",
      "const": "/* Relative Path: your_app/import_mapping_setting/import_mapping_setting_list.js */\\n\\nfrappe.listview_settings[\\\"Import Mapping Setting\\\"] = {\\n    hide_name_column: true,\\n    onload(listview) {\\n        // List view customisation\\n    },\\n};\\n"
    },
    "your_app/app_module/doctype_name_in_frappe/doctype_name/doctype_file.json": {
      "type": "string",
      "const": "# Relative Path: your_app/import_mapping_setting/doctype_name/file_name/file.json\\n# Purpose: Add dashboard charts / links\\n\\n\\ndef get_data():\\n    return {\\n        \\\"fieldname\\\": \\\"import_mapping_setting\\\",\\n        \\\"transactions\\\": [\\n            {\\\"label\\\": \\\"Logs\\\", \\\"items\\\": [\\\"Import Log\\\"]},\\n        ],\\n    }\\n"
    },
    "your_app/app_module/doctype_name_in_frappe/doctype_name/doctype_file.py": {
      "type": "string",
      "const": "# Relative Path: your_app/import_mapping_setting/test_import_mapping_setting.py\\n# Purpose: Unit tests with pytest\\n# Run: bench --site <SITE> run-tests --app your_app\\n\\nimport frappe\\nimport pytest\\n\\n\\ndef test_unique_constraint():\\n    doc1 = frappe.get_doc({\\n        \\\"doctype\\\": \\\"Import Mapping Setting\\\",\\n        \\\"mapping_name\\\": \\\"Test\\\",\\n        \\\"target_doctype\\\": \\\"Customer\\\",\\n    }).insert()\\n\\n    doc2 = frappe.get_doc({\\n        \\\"doctype\\\": \\\"Import Mapping Setting\\\",\\n        \\\"mapping_name\\\": \\\"Test\\\",\\n        \\\"target_doctype\\\": \\\"Customer\\\",\\n    })\\n\\n    with pytest.raises(frappe.ValidationError):\\n        doc2.insert()\\n\\n    doc1.delete()\\n"
    },
    "your_app/www/index.py": {
      "type": "string",
      "const": "# Relative Path: your_app/www/index.py\\n# Purpose: Controller for public page\\n\\nimport frappe\\n\\n\\ndef get_context(context):\\n    context.show_sidebar = True\\n    context.heading = \\\"Hello from Your App\\\"\\n"
    },
    "your_app/www/index.html": {
      "type": "string",
      "const": "<!-- Relative Path: your_app/www/index.html -->\\n\\n{% extends \\\"templates/web.html\\\" %}\\n\\n{% block page_content %}\\n<h1>{{ heading }}</h1>\\n<p>This is a public page served by Your App.</p>\\n{% endblock %}\\n"
    },
    "your_app/tasks.py": {
      "type": "string",
      "const": "# Relative Path: your_app/tasks.py\\n# Purpose: Long-running scheduled jobs\\n\\nimport frappe\\nfrom frappe.utils.background_jobs import enqueue\\n\\n\\ndef daily():\\n    enqueue(\\\"your_app.tasks._backup_site\\\")\\n\\n\\ndef _backup_site():\\n    # TODO: implement backup\\n    pass\\n"
    },
    "note": {
        "type": "string",    
        "const": "Every doctype directory should contain a __init__.py, a doctype_file.py, a doctype_file.js, and a doctype_file.json file."
    }
  },
  "required": [
    ".gitignore",
    "pyproject.toml",
    "README.md",
    "CHANGELOG.md",
    "LICENSE",
    "your_app/__init__.py",
    "your_app/hooks.py",
    "your_app/modules.txt",
    "your_app/patches.txt",
    "your_app/config/desktop.py",
    "your_app/public/js/app.bundle.js",
    "your_app/public/css/app.css",
    "your_app/www/index.py",
    "your_app/www/index.html",
    "your_app/tasks.py",
    ".github/workflows/tests.yml"
  ],
  "additionalProperties": false
}
